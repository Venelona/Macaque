//---------------------------Booting and Ending--------------------------
//Macman


//--OnFirstBoot--

OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using. I'll briefly touch on what they are, but for the most part you should not need to edit any of these and you can safely ignore most of them (except nowshell if you've changed your shell folder's name from master). Definitely don't delete them unless you know what you're doing.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "Human" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "Macaque" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	firstboot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name.
	monthdialogue = 0
	monkeymood = 0
	frenpoints = 0
	firstchoice = 4
	patme = 0
	timecheckers = 1
	dayask = 0
	monkeywatch = 0
	watchmacwatchscreen = 0
	watchmacmusic = 0
	watchmacwatchhome = 0
	watchmacdraw = 0
	watchmacgames = 0
	watchmacmovies = 0
	watchmacvideos = 0
	watchmacwrite = 0
	
	if reference0 == 0 //Don't touch this line.
 	{
		//---- Alright, here is where the dialogue for your ghost begins! Again, I hope you've studied up on the walkthrough's guide to dialogue coding! However, there are a few unique things about this first conversation that you should keep in mind.
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly. This is one of the very few instances you'll ever use it, so make sure to get out of it at the end! I'll tell you when, so don't worry.
		//In Notepad++ with C language, you'll also notice that this dialogue is black instead of grey. This is because of the use of the backwards slash as mentioned in the advanced section of the SakuraScripting page. Do you see near the bottom where it has \n\n[half]/ with the other slash at the end before the choices are listed? You will want to replace dialogue up that \n\n[half], but do not mess with the choices beyond that unless you know what you're doing.
		//Always make sure to keep your dialogue in the quotation marks! And remember, you can't use quotation marks IN dialogue either. You can use two single apostrophes instead if you must. And REMEMBER what I said about \![enter,passivemode]! Do NOT delete that tag! \![raise,OnFirstBoot,0]
		
		"\![enter,passivemode]\0\s[63]\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w3What do we have here? \w8\w6\i[5]\w4\s[32]Nice place you have. \w8\w6\s[13]I'm Macaque. \w8\w4\s[9]Actually, \w2Six-Eared Macaque is, \w2\s[14]yunno,\n\w2\s[8]my full name. \w8\w4\s[14]And you are?\![open,inputbox,OnNameTeach,-1]\e"
		--
		NameInput
		
		//There's a lot going on here, but what you mostly need to remember is to enter Passivemode at the beginning, and make sure not to touch the bottom part that starts with \w5\_q where the options are set up. Do whatever you like with the rest of the dialogue though! Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Note also the use of the \x and \c tags. Read more about them in the intermediate SakuraScript section of the walkthrough if you're curious.
		
		//*********************Advanced User Info*******************************
		//You can rename the choices at the bottom anything you like. The basic structure of a choice goes like \q[Displayed Name,Linkedfunction]. So for example, \q[Do a Dance,danceitup] would display "Do a Dance" in the balloon and it would link to the function titled "danceitup".
		//Note - Do not include quotation marks in the displayed name, or any other symbols like brackets or dialogue coding like \_a, since that'll break the option in the balloon. If you do this you'll notice pretty quickly. Also option names do not word wrap, so don't make them too long if your balloon is small.
		
		//If you remember my note from above about the difference between On functions, this is one place it comes up. If your linked function in this menu doesn't start with On, like danceitup up there, you'll have to preface it in the following code with Select.danceitup. You can see this at work below here. However, if it does have On, such as OnDanceitup, then you can simply name the function in the code as OnDanceitup. Take a look whenever functions are defined and how they're called in the files,and it should come together for you.
		
		//If you link to a function that doesn't exist, the ghost will do nothing. This can be handy for "Cancel" type functions, just point it at something that doesn't exist if you don't want to have a specific bit of cancel dialogue.
		
		//If you want your ghost to just refer to your user as "they" and want to skip the pronoun business altogether, then you can just delete the choices and end the dialogue with \e. You'll want to go into menu.dic and delete the pronoun choice option from the config menu as well.
		//***********************************************************************
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You can change this to reflect the fact the user's uninstalled your ghost once, or you can make it the same as the above, it's up to you. You'll see this if you try to run OnFirstBoot using ![raise] without the extra 0 as mentioned above.
 		{
 		"\![enter,passivemode]\0\s[63]\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w8\w3What do we have here? \w8\w6\i[5]\w4\s[32]Nice place you have. \w8\w4\s[35]Familiar, even\w5.\w5.\w5. \w8\w8\w4\s[13]I'm Macaque. \w8\w4\s[9]Actually, \w2Six-Eared Macaque is, \w2\s[14]yunno, \w2\s[8]my full name. \w8\w4\s[14]And you are?\![open,inputbox,OnNameTeach,-1]\e"
		}
 	}
}


Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	hesshes = "he's"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	hesshes = "she's"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "theirs"
	hesshes = "they're"
	--
	NameInput
}


//--NameInput


NameInput
{
	//Note that there's a \![leave,passivemode] tag in this dialogue! Don't forget about this! If you leave them in passivemode they won't talk at all and it'd sort of defeat the purpose, right? I actually forgot this for a while with Hunter and Smoker and didn't notice because OnFirstBoot only runs once, so it took me some testing to find out what was wrong. Always make sure to leave passivemode when you're done with it!
	
	"\![open,inputbox,OnNameTeach,-1]\e"
	
	//At the end of this dialogue there's a tag saying "\![open,inputbox,OnNameTeach,-1]". It basically leads to the naming function defined in nameteach.dic, so don't touch it. Make sure it's there though! Otherwise your user won't have a way to put in their name. :o
	
	//*********************Advanced User Info*******************************
	//What this tag basically means is that you're calling a function at the end of the dialogue with the \! tag, you are telling it to open, you're telling it to open an inputbox, and you're telling that inputbox to link to a function called OnNameTeach, which is in the nameteach.dic file. Remember what I said about On functions? I talked a bit about this in the SakuraScripting walkthrough page and the coding page.
	//The -1 at the end determines how long the box will be open until it times out. -1 means it shouldn't time out at all, I think.
	//***********************************************************************
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

dayslot
{
	"%(month)month %(day)day"
}

idleposechange
{
	"s[0]"
	"s[0]"
	"s[8]"
	"s[8]"
	"s[2]"
	"s[2]"
	"s[7]"
	"s[7]"
	"s[7]"
	"s[46]"
	"s[46]"
	"s[18]"
	"s[16]"
	"s[22]"
	"s[31]"
	"s[32]"
	"s[36]"
}

timeposechange
{
	"s[28]"
	"s[0]"
	"s[8]"
	"s[29]"
	"s[2]"
	"s[7]"
	"s[26]"
	"s[46]"
	"s[47]"
	"s[16]"
	"s[15]"
	"s[31]"
	"s[27]"
}
//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot


OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passhour = 0
	passmin = 0
	passsec = 0
	monkeymood = 0
	dayask = 0
	monkeywatch = 0
	
	//IDLE POSE
	if monkeywatch == 1
	{"\0\s[56]\1\s[10]"}
	else
	{"\0\%(idleposechange)\1\s[10]"}
	
	--
	
	if dayslot == userbirthday //Now we're getting into the if statements. These check what the date is and, if it's a certain value, displays special dialogue. Here, the if statement is looking at the dayslot value (which we just defined) and evaluating it using the == operator to see if it equals another value, in this case the value "userbirthday". Basically this is checking to see if it's the user's birthday.
	
	//*********************Advanced User Info*******************************
	//If you're checking a value in an if statement, remember! 
	//= will define a value, so if you put blah = 90, it will change blah to 90.
	//== will check the value in an if statement, so if you put blah == 90, it will check if blah equals 90.
	//This tripped me up at first, so keep it in mind!
	//***********************************************************************
	
	{
				"\0\s[0]It's %(bornmonthprint) %(borndayprint).\w8\1\s[10]Happy birthday, %(username).\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day. These were defined when the user put in their birthday in the menu.dic file. See word.dic for more info on envelopes.
				//If the user didn't or hasn't put in their birthday yet, this dialogue will basically never get called. Which makes sense.
	}
	else
	{
		"%(normalboottalks)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk


normalboottalks
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
	{
			"\0\s[4]What do we have here? \w8\w5\s[29]My favourite human! \w8\w6\i[6]Well, \w4\s[14]maybe second favourite. \w8\w4\s[8]\i[6]Or third. \w8\w4\s[2]Heya.\e"
	}
	elseif RAND(100) < 65 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
	{
			"\0\s[13]Yo, \w3\s[14]howsit going?\e"
		
			"\0\s[33]You again? \w8\w4\s[2]You must be my biggest fan.\e"
		
			"\0\s[9]Macaque, \w6\s[14]\i[6]the one and only, \w6\s[3]at your service.\e"
		
			"\0\s[3]Missed me?\e"
		
			"\0\s[32]You've been busy, \w4huh?\e"
		
			"\0\s[20]I hope I'm not interrupting.\e"
	}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
			"\0\s[1]Ah- \w8\w3\s[30]Must we do this so early, \w4\s[28]%(username)?\e"
			
			"\0\s[27]You're one early bird. \w8\w6\s[16]I'm not an early bird myself. \w8\w4\s[16]\i[6]Or an early monkey.\e"
		
		//	"\0\s[10]This is the third early morning boot dialogue.\w8\0\s[0]Between the hours of five and eight.\e"
		}
		elseif timeslot == "morning"
		{
			"\0\s[0]Morning. \w8\w8\s[28]Not my time of day, \w4\s[13]but we'll get there.\e"
		
		//"\1\s[10]This is another morning boot dialogue.\w8\0\s[0]Yup.\e"
		}
		elseif timeslot == "lunch"
		{
			"\0\s[13]%(username)! \w8\w6\s[3]Missed me?\e"
			"\0\s[9]It's me, \w6\s[13]Macaque.\e"
		
		//"\1\s[10]This is another lunch boot dialogue.\e"
		}
		elseif timeslot == "afternoon"
		{
			"\0\s[20]Hey there. \w8\w6\s[19]Time to make this day more fun.\e"
		}
		elseif timeslot == "evening"
		{
 		
			"\0\s[46]Hey there. \w8\w6\s[18]Up for some mischief?\e"
		}
		elseif timeslot == "latenight"
		{
			"\0\s[32]Ah, \w5night, \w5\s[3]my domain.\e"
			
			"\0\s[13]Great time to call me, \w4pal, \w6\s[29]the sun is down and the shadows are plenty. \w8\w8\w2\s[20]And I am fresh from a nap.\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		//"\0\s[0]This is a middle of the night boot dialogue.\1\w8\s[10]From midnight to five.\e"
			
			"\0\s[2]At this time of day, \w5\s[3]the only creatures that still up are demons\w3.\w3.\w3. \w8\w8\w2\s[14]and you, \w4it seems.\e"
			
			"\0\s[5]I like darkness, \w5\s[19]\i[6]it's kind of my whole thing, \w5\s[46]but it's late even for me, \w3bud.\e"
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to
//OnClose


OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 65 //see above about the random number generator
			{
				"\0\s[13]I'm off to do some \w3\s[3]\f[italic,true]scheming.\f[italic,false]\w8"
				
				"\0\s[14]See you around, \w3kiddo.\w8"
				
				"\0\s[50]Cya.\w8"
				
				"\0\s[65]Cya.\w8\w8\w8\w8"
				
				"\0\s[64]Bye then.\s[65]\w8\w8\w8\w8"
				
				"\0\s[64]I'll be off then.\s[65]\w8\w8\w8\w8"
				
				"\0\s[64]Watch your\s[65] back.\w8\w8\w8\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\0\s[31]Sun's coming up. \w8\w6\s[50]Time for this monkey to hide away and wait for the \s[3]perfect time to strike.\w8"
					
					"\0\s[8]Good timing, \w3bud. \w8\w4\s[65]Cya.\w8\w8\w8\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[7]Time for a nap. \w8\w6\s[21]Bye\w3-bye, \w3pal.\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[4]I'll be off then. \w8\w6\s[40]Bye, \w3human.\w8"
					
					"\0\s[4]Until next time, \w3human. \w8\w5\s[64]Or not. \w8\w5Who knows.\s[65]\w8\w8\w8\w8"
					
 					//"\0\s[0]This is another lunch close dialogue.\w8\1\s[10]In the middle of the day.\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[20]Time to wreak havoc back home. \w8\w4\s[19]\i[6]It's been fun, \w3%(username).\w8"
					
					"\0\s[65]Later.\w8\w8\w8\w8"
					
 					//"\1\s[10]This is another afternoon close dialogue.\w8\0\s[0]Yup.\w8"
 				}
  			elseif timeslot == "evening"
 				{
 					"\0\s[20]Time to wreak havoc back home. \w8\w4\s[19]\i[6]It's been fun, \w3dude.\w8"
					
					"\0\s[65]B\w1y\w1e\w1e\w1e\w1e.\w8\w8\w8\w8"
 				}
			elseif timeslot == "latenight"
			 	{
 					"\0\s[9]It's Macaque time. \w8\w4\s[40]Cya around, \w3bud.\w8"
					
					"\0\s[1]\i[5]*You tell him good night.\n\n[half]\w8\w5\s[50]Buddy, \w3\s[4]I'm more awake at night than ever. \w8\w5\s[52]\i[6]See you.\w8"
					
					"\0\s[64]Back to the\s[65] shadows.\w8\w8\w8\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\0\s[30]You know\w4.\w4.\w4. \w8\w5\s[22]eh, \w3nevermind. \w8\w4\s[27]G'night.\w8"
 						}
						"\0\s[1]\i[5]*You tell him good night.\n\n[half]\w8\w6\s[50]Oh, \w4\s[52]night is my time of day, \w3bud, \w3\s[46]but thanks. \w8\w4\s[47]\i[6]Later.\w8"
						
						"\0\s[53]\i[6]Time to get back to mischief. \w8\w5\s[52]Cya, \w3buddy.\w8"
						
						"\0\s[13]You're heading to sleep? \w8\w5\s[26]Night, \w4dude.\w8"
						
						"\0\s[65]Night.\w8\w8\w8\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[1]Well, \w3\s[23]that was fast. \w8\w4\s[44]Bye I guess.\w8\w8"
		
		"\0\s[44]Got everything you needed? \w8\w4\i[6]Tch. \w8\w4\s[48]\i[6]Typical.\w8\w8"
		
		"\0\s[1]Oop- \w8\s[0]Later, \w3I guess.\w8\w8"
		
 		//"\1\s[10]This is another bit of dialogue for closing us before five minutes have passed.\w8\0\s[0]Quickly done.\w8\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 
 
 //--OnWindowStateMinimize

//This will run when you minimize them. Replace with what you like.

 OnWindowStateMinimize
 {
	"\0\s[53]I'm still here. \w8\w4In the shadows.\e"
}


//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[50]Macaque's back. \w8\w5Back again.\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost or the Developer's Console->Reload->Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "Macaque" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt. I set this up to use the full ghost's name with Hunter and Smoker but I forget exactly how I did it and I'm having trouble getting it to work again. I think I just didn't define the Sakura or Kero names in either descript.txt or install.txt. You can experiment with it yourself. Otherwise, leave it as your Sakura character's name.
	{
		"\0\s[2]I'll be back in a sec. \w8\w5\s[52]\i[6]Like that time I bit the dust, \w3heh.\w8\w8\e"
		//Replace this dialogue with whatever you like.
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[46]Summoning %(reference0)? \w8\w5\s[47]\i[6]I don't know what kind of demon they are, \w3\s[19]but I hope you'll hand them the work you'd usually hand me instead~\w8\w8\e"
		
		//Replace this dialogue with whatever you like. Notice the use of the %(reference0) envelope here? In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example. You don't have to use %(reference0) if you don't want to though.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[3]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Macaque" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[3]Told ya I'll be back.\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[52]Bye-bye, %(reference0). \w8\0\s[9]It's my time to shine. \w8\w4\s[47]Or my time to shadow, \w3I guess.\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell. If you don't have any other shells for your ghost, you can safely ignore this but don't delete it, you might as well keep it just in case. I probably won't add a different shell to this template because shells are a lot of work ugh, but for the sake of argument, let's pretend I did.

OnShellChanging
 {
	if reference0 == "Six Eared Macaque" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
		"\0\s[50]\i[6]Fine, \w4fine, \w3I'll show you\w3.\w3.\w3.\w8\e"
	//Then rewrite this line as appropriate.
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[52]\i[6]Give me a sec\w3.\w3.\w3.\w8\e"
	
	//"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	
	//Rewrite these two lines as you need.
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.
 
OnShellChanged
 {
 	if reference0 == "Macaque" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "Macaque" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[13]\i[6]Back to normal. \w8\w4\s[14]Well, \w3\s[19]\i[6]my kind of normal.\e"
		//Replace dialogue as required.
 	}
 	elseif reference0 == "Six Eared Macaque" //You can use as many elseifs for as many shells as you've got.
 	{
 		nowshell = "Six Eared Macaque"
		
 		"\0\s[41]There. \w8\w6\s[19]Now I can eavesdrop more efficiently.\e"
		
 		//"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
		//Replace these bits with whatever you have in mind.
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
		//Replace this as well.
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[52]You like me now? \w8\w4\s[50]\i[6]Don't worry, \w3\s[4]I know you do~\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to. Replace this bit of dialogue as you need.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost. Make sure to read the clothing page on the walkthrough for details on how clothes work! This template won't have any because Girl and Triangle move around too much for it, but if your ghost is mostly stationary, clothes are an option. In that case, these functions are for you. For now, I'll fill this in with some hypothetical items. Replace the dialogue below with whatever you need.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character, as you know from the walkthrough by now.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie" //As you've seen above, you can use elseifs to expand the list if you have more than one item.
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}